// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subject.sql

package database

import (
	"context"
)

const checkSubjectExist = `-- name: CheckSubjectExist :one
SELECT COUNT(*) FROM go_subject WHERE subject_id = $1
`

func (q *Queries) CheckSubjectExist(ctx context.Context, subjectID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkSubjectExist, subjectID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllSubject = `-- name: GetAllSubject :many
SELECT subject_id, subject_title, subject_credit, subject_note FROM go_subject
`

func (q *Queries) GetAllSubject(ctx context.Context) ([]GoSubject, error) {
	rows, err := q.db.QueryContext(ctx, getAllSubject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoSubject
	for rows.Next() {
		var i GoSubject
		if err := rows.Scan(
			&i.SubjectID,
			&i.SubjectTitle,
			&i.SubjectCredit,
			&i.SubjectNote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubjectById = `-- name: GetSubjectById :one
SELECT subject_id, subject_title, subject_credit, subject_note FROM go_subject WHERE subject_id = $1
`

func (q *Queries) GetSubjectById(ctx context.Context, subjectID string) (GoSubject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectById, subjectID)
	var i GoSubject
	err := row.Scan(
		&i.SubjectID,
		&i.SubjectTitle,
		&i.SubjectCredit,
		&i.SubjectNote,
	)
	return i, err
}
