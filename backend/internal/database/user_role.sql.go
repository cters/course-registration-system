// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_role.sql

package database

import (
	"context"
	"database/sql"
)

const assignRoleToUser = `-- name: AssignRoleToUser :execresult
INSERT INTO go_user_role (user_id, role_id) 
VALUES ($1, $2)
`

type AssignRoleToUserParams struct {
	UserID int32
	RoleID int32
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
}

const getRoleUsers = `-- name: GetRoleUsers :many
SELECT ur.user_id, ur.role_id, u.user_name, u.user_email
FROM go_user_role ur
JOIN go_user u ON ur.user_id = u.user_id
WHERE ur.role_id = $1
ORDER BY u.user_name
`

type GetRoleUsersRow struct {
	UserID    int32
	RoleID    int32
	UserName  string
	UserEmail string
}

func (q *Queries) GetRoleUsers(ctx context.Context, roleID int32) ([]GetRoleUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoleUsers, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleUsersRow
	for rows.Next() {
		var i GetRoleUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT ur.user_id, ur.role_id, r.role_name
FROM go_user_role ur
JOIN go_role r ON ur.role_id = r.role_id
WHERE ur.user_id = $1
ORDER BY r.role_name
`

type GetUserRolesRow struct {
	UserID   int32
	RoleID   int32
	RoleName sql.NullString
}

func (q *Queries) GetUserRoles(ctx context.Context, userID int32) ([]GetUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRolesRow
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(&i.UserID, &i.RoleID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRolesByUserName = `-- name: GetUserRolesByUserName :many
SELECT ur.user_id, ur.role_id, r.role_name
FROM go_user_role ur
JOIN go_role r ON ur.role_id = r.role_id
JOIN go_user u ON ur.user_id = u.user_id
WHERE u.user_name = $1
ORDER BY r.role_name
`

type GetUserRolesByUserNameRow struct {
	UserID   int32
	RoleID   int32
	RoleName sql.NullString
}

func (q *Queries) GetUserRolesByUserName(ctx context.Context, userName string) ([]GetUserRolesByUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRolesByUserName, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRolesByUserNameRow
	for rows.Next() {
		var i GetUserRolesByUserNameRow
		if err := rows.Scan(&i.UserID, &i.RoleID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM go_user_role 
WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID int32
	RoleID int32
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}
