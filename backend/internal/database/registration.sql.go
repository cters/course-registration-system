// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: registration.sql

package database

import (
	"context"
	"database/sql"
)

const createRegistration = `-- name: CreateRegistration :execresult
INSERT INTO go_registration (student_id, course_id, registration_status) VALUES ($1, $2, $3)
`

type CreateRegistrationParams struct {
	StudentID          int64
	CourseID           int32
	RegistrationStatus string
}

func (q *Queries) CreateRegistration(ctx context.Context, arg CreateRegistrationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRegistration, arg.StudentID, arg.CourseID, arg.RegistrationStatus)
}

const deleteRegistration = `-- name: DeleteRegistration :execresult
DELETE FROM go_registration WHERE registration_id = $1
`

func (q *Queries) DeleteRegistration(ctx context.Context, registrationID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRegistration, registrationID)
}

const getCourseRegistrations = `-- name: GetCourseRegistrations :many
SELECT r.registration_id, r.student_id, r.course_id, r.registration_status, r.registration_date, s.student_id, u.user_name, u.user_email
FROM go_registration r
JOIN go_student s ON r.student_id = s.student_id
JOIN go_user u ON s.user_id = u.user_id
WHERE r.course_id = $1
ORDER BY r.registration_date
`

type GetCourseRegistrationsRow struct {
	RegistrationID     int64
	StudentID          int64
	CourseID           int32
	RegistrationStatus string
	RegistrationDate   sql.NullTime
	StudentID_2        int64
	UserName           string
	UserEmail          string
}

func (q *Queries) GetCourseRegistrations(ctx context.Context, courseID int32) ([]GetCourseRegistrationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCourseRegistrations, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourseRegistrationsRow
	for rows.Next() {
		var i GetCourseRegistrationsRow
		if err := rows.Scan(
			&i.RegistrationID,
			&i.StudentID,
			&i.CourseID,
			&i.RegistrationStatus,
			&i.RegistrationDate,
			&i.StudentID_2,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentRegistrations = `-- name: GetStudentRegistrations :many
SELECT r.registration_id, r.student_id, r.course_id, r.registration_status, r.registration_date, c.subject_id, c.course_term
FROM go_registration r
JOIN go_course c ON r.course_id = c.course_id
WHERE r.student_id = $1
ORDER BY r.registration_date DESC
`

type GetStudentRegistrationsRow struct {
	RegistrationID     int64
	StudentID          int64
	CourseID           int32
	RegistrationStatus string
	RegistrationDate   sql.NullTime
	SubjectID          string
	CourseTerm         string
}

func (q *Queries) GetStudentRegistrations(ctx context.Context, studentID int64) ([]GetStudentRegistrationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentRegistrations, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentRegistrationsRow
	for rows.Next() {
		var i GetStudentRegistrationsRow
		if err := rows.Scan(
			&i.RegistrationID,
			&i.StudentID,
			&i.CourseID,
			&i.RegistrationStatus,
			&i.RegistrationDate,
			&i.SubjectID,
			&i.CourseTerm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRegistrationStatus = `-- name: UpdateRegistrationStatus :one
UPDATE go_registration 
SET registration_status = $2
WHERE registration_id = $1
RETURNING registration_id, student_id, course_id, registration_status, registration_date
`

type UpdateRegistrationStatusParams struct {
	RegistrationID     int64
	RegistrationStatus string
}

func (q *Queries) UpdateRegistrationStatus(ctx context.Context, arg UpdateRegistrationStatusParams) (GoRegistration, error) {
	row := q.db.QueryRowContext(ctx, updateRegistrationStatus, arg.RegistrationID, arg.RegistrationStatus)
	var i GoRegistration
	err := row.Scan(
		&i.RegistrationID,
		&i.StudentID,
		&i.CourseID,
		&i.RegistrationStatus,
		&i.RegistrationDate,
	)
	return i, err
}
