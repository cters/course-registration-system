// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: course.sql

package database

import (
	"context"
	"database/sql"
)

const addCourse = `-- name: AddCourse :execresult
INSERT INTO go_course (subject_id, course_term, course_max_slot, course_created_at, course_updated_at) VALUES ($1, $2, $3, NOW(), NOW())
`

type AddCourseParams struct {
	SubjectID     string
	CourseTerm    string
	CourseMaxSlot int16
}

func (q *Queries) AddCourse(ctx context.Context, arg AddCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addCourse, arg.SubjectID, arg.CourseTerm, arg.CourseMaxSlot)
}

const checkCourseExist = `-- name: CheckCourseExist :one
SELECT COUNT(*) FROM go_course WHERE course_id = $1
`

func (q *Queries) CheckCourseExist(ctx context.Context, courseID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkCourseExist, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCourseById = `-- name: DeleteCourseById :execresult
DELETE FROM go_course WHERE course_id = $1
`

func (q *Queries) DeleteCourseById(ctx context.Context, courseID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCourseById, courseID)
}

const getCourseById = `-- name: GetCourseById :one
SELECT course_id, subject_id, course_term, course_max_slot, course_current_slot FROM go_course WHERE course_id = $1
`

type GetCourseByIdRow struct {
	CourseID          int64
	SubjectID         string
	CourseTerm        string
	CourseMaxSlot     int16
	CourseCurrentSlot int16
}

func (q *Queries) GetCourseById(ctx context.Context, courseID int64) (GetCourseByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCourseById, courseID)
	var i GetCourseByIdRow
	err := row.Scan(
		&i.CourseID,
		&i.SubjectID,
		&i.CourseTerm,
		&i.CourseMaxSlot,
		&i.CourseCurrentSlot,
	)
	return i, err
}

const getCourseBySubjectIdAndTerm = `-- name: GetCourseBySubjectIdAndTerm :one
SELECT course_id, subject_id, course_term, course_max_slot, course_current_slot FROM go_course WHERE subject_id = $1 AND course_term = $2
`

type GetCourseBySubjectIdAndTermParams struct {
	SubjectID  string
	CourseTerm string
}

type GetCourseBySubjectIdAndTermRow struct {
	CourseID          int64
	SubjectID         string
	CourseTerm        string
	CourseMaxSlot     int16
	CourseCurrentSlot int16
}

func (q *Queries) GetCourseBySubjectIdAndTerm(ctx context.Context, arg GetCourseBySubjectIdAndTermParams) (GetCourseBySubjectIdAndTermRow, error) {
	row := q.db.QueryRowContext(ctx, getCourseBySubjectIdAndTerm, arg.SubjectID, arg.CourseTerm)
	var i GetCourseBySubjectIdAndTermRow
	err := row.Scan(
		&i.CourseID,
		&i.SubjectID,
		&i.CourseTerm,
		&i.CourseMaxSlot,
		&i.CourseCurrentSlot,
	)
	return i, err
}

const updateCourseById = `-- name: UpdateCourseById :execresult
UPDATE go_course
SET 
    subject_id = COALESCE($1, subject_id),
    course_term = COALESCE($2, subject_id),
    course_max_slot = COALESCE($3, subject_id),
    course_current_slot = COALESCE($4, subject_id),
    course_updated_at = NOW()
WHERE course_id = $5
`

type UpdateCourseByIdParams struct {
	SubjectID         string
	CourseTerm        string
	CourseMaxSlot     int16
	CourseCurrentSlot int16
	CourseID          int64
}

func (q *Queries) UpdateCourseById(ctx context.Context, arg UpdateCourseByIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCourseById,
		arg.SubjectID,
		arg.CourseTerm,
		arg.CourseMaxSlot,
		arg.CourseCurrentSlot,
		arg.CourseID,
	)
}
