// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :execresult
INSERT INTO go_user (
    email, phone, salt, username, password, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, NOW(), NOW()
)
`

type AddUserParams struct {
	Email    string
	Phone    string
	Salt     string
	Username string
	Password string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUser,
		arg.Email,
		arg.Phone,
		arg.Salt,
		arg.Username,
		arg.Password,
	)
}

const checkUserExist = `-- name: CheckUserExist :one
SELECT COUNT(*) FROM go_user WHERE email = $1
`

func (q *Queries) CheckUserExist(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserExist, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, salt FROM go_user WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID       int32
	Email    string
	Username string
	Password string
	Salt     string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Salt,
	)
	return i, err
}
