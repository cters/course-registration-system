// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package database

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :one
INSERT INTO go_role (role_name, role_created_at, role_updated_at) 
VALUES ($1, NOW(), NOW()) 
RETURNING role_id
`

func (q *Queries) CreateRole(ctx context.Context, roleName sql.NullString) (int32, error) {
	row := q.db.QueryRowContext(ctx, createRole, roleName)
	var role_id int32
	err := row.Scan(&role_id)
	return role_id, err
}

const getRole = `-- name: GetRole :one
SELECT role_id, role_name 
FROM go_role 
WHERE role_id = $1
`

type GetRoleRow struct {
	RoleID   int32
	RoleName sql.NullString
}

func (q *Queries) GetRole(ctx context.Context, roleID int32) (GetRoleRow, error) {
	row := q.db.QueryRowContext(ctx, getRole, roleID)
	var i GetRoleRow
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT role_id, role_name 
FROM go_role 
WHERE role_name = $1
`

type GetRoleByNameRow struct {
	RoleID   int32
	RoleName sql.NullString
}

func (q *Queries) GetRoleByName(ctx context.Context, roleName sql.NullString) (GetRoleByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, roleName)
	var i GetRoleByNameRow
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const roleExists = `-- name: RoleExists :one
SELECT EXISTS(SELECT 1 FROM go_role WHERE role_id = $1)
`

func (q *Queries) RoleExists(ctx context.Context, roleID int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, roleExists, roleID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE go_role 
SET role_name = $2, role_updated_at = CURRENT_TIMESTAMP 
WHERE role_id = $1 
RETURNING role_id, role_name
`

type UpdateRoleParams struct {
	RoleID   int32
	RoleName sql.NullString
}

type UpdateRoleRow struct {
	RoleID   int32
	RoleName sql.NullString
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (UpdateRoleRow, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.RoleID, arg.RoleName)
	var i UpdateRoleRow
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const updateRoleByName = `-- name: UpdateRoleByName :one
UPDATE go_role 
SET role_name = $2, role_updated_at = CURRENT_TIMESTAMP 
WHERE role_name = $1 
RETURNING role_id, role_name
`

type UpdateRoleByNameParams struct {
	RoleName   sql.NullString
	RoleName_2 sql.NullString
}

type UpdateRoleByNameRow struct {
	RoleID   int32
	RoleName sql.NullString
}

func (q *Queries) UpdateRoleByName(ctx context.Context, arg UpdateRoleByNameParams) (UpdateRoleByNameRow, error) {
	row := q.db.QueryRowContext(ctx, updateRoleByName, arg.RoleName, arg.RoleName_2)
	var i UpdateRoleByNameRow
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}
