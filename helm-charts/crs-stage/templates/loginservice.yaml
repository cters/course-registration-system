apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: {{ .Release.Namespace }}-rabbitmq-cluster
spec:
  replicas: 1
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 800m
      memory: 1Gi
  persistence:
    storage: 2Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Namespace }}-loginservice-config
data:
  production.yaml: |-
    server:
      port: 8000
      mode: production

    postgresql:
      host: {{ .Release.Namespace }}-postgresql.{{ include "helm-chart.servicehostname" .}}
      port: 5432
      dbname: {{ .Values.global.postgresql.auth.database }}
      sslmode: disable

    logger:
      log_level: debug
      file_log_name: ./storages/logs/dev.log
      max_backups: 30
      max_age: 7
      max_size: 1024
      compress: true

    redis:
      host: {{ .Release.Namespace }}-redis-master.{{ include "helm-chart.servicehostname" .}}
      port: 6379
      database: 0

    rabbitmq:
      host: {{ .Release.Namespace }}-rabbitmq-cluster.{{ include "helm-chart.servicehostname" .}}
      port: 5672

    jwt:
      TOKEN_HOUR_LIFESPAN: 1
      JWT_EXPIRATION: 1h

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Namespace }}-loginservice-secrets
type: Opaque
stringData: 
  production.yaml: |-
    jwt.secretKey: {{ .Values.loginservice.secrets.jwt.secretKey }}
    postgresql.username: {{ .Values.global.postgresql.auth.username }}
    postgresql.password: {{ .Values.global.postgresql.auth.password }}
    redis.password: {{ .Values.global.redis.password }}
    rabbitmq.user: {{ .Values.global.rabbitmq.name }}
    rabbitmq.password: {{ .Values.global.rabbitmq.password }} 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Namespace }}-loginservice
  labels:
    app: loginservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: loginservice
  template:
    metadata:
      labels:
        app: loginservice
    spec:
      containers:
        - name: loginservice
          image: kng1259/crs-loginservice:0.0.1
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          env:
            - name: MODE
              value: "production"
          envFrom:
            - secretRef:
                name: {{ .Release.Namespace }}-loginservice-secrets
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: secrets-volume
              mountPath: /app/secrets
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Release.Namespace }}-loginservice-config
            items:
        - name: secrets-volume
          secret:
            secretName: {{ .Release.Namespace }}-loginservice-secrets
            items:

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Namespace }}-loginservice
spec:
  selector:
    app: loginservice
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Namespace }}-login-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web

spec:
  ingressClassName: traefik
  rules:
    - host: kng.k8s.dev.local
      http:
        paths:
          - path: /api/v1/user
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Namespace }}-loginservice
                port:
                  number: 8000